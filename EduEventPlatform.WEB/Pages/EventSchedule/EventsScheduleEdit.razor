@page "/EventSchedule/edit/{Id:int}"

@using EduEventPlatform.Shared.Entities;
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

<h3>Editar Programa del Evento</h3>

@if (eventSchedule is null)
{
    <div class="align-items-center">
        <img src=" https://img.pikbest.com/png-images/20190918/cartoon-snail-loading-loading-gif-animation_2734139.png!bw700 " />
    </div>
}
else
{
    <EventsScheduleForm @ref="eventsScheduleForm" eventSchedule="eventSchedule" OnSubmit="Edit" ReturnAction="Return" />
}

@code {
    private EventSchedule? eventSchedule;
    private EventsScheduleForm? eventsScheduleForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<EventSchedule>($"api/EventSchedule/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("EventSchedule");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            eventSchedule = responseHTTP.Response;
        }
    }

    private async Task Edit()
    {
        var responseHTTP = await repository.Put("api/EventSchedule", eventSchedule);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            eventsScheduleForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("EventSchedule");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("EventSchedule");
    }
}